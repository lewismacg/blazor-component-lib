@page "/FormComponents"
@using Blazored.FluentValidation
@using ComponentDemo.Models

<div class="container-fluid">
	<div class="row">
		<div class="col-sm-12">
			<h1>Components</h1>
		</div>
	</div>
	<div class="row justify-content-center text-center">
		<div class="col-sm-12 pb-5">
			<h5>Buttons</h5>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Primary</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-blue">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-blue btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-blue" disabled>Button</button>
				</div>
			</div>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Secondary</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-yellow">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-yellow btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-yellow" disabled>Button</button>
				</div>
			</div>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Success</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-green">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-green btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-green" disabled>Button</button>
				</div>
			</div>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Danger</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-red">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-red btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-red" disabled>Button</button>
				</div>
			</div>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Info</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-lightblue">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-lightblue btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-lightblue" disabled>Button</button>
				</div>
			</div>
		</div>
		<div class="col-sm-12">
			<div class="row">
				<div class="col-sm-3">
					<b>Link</b>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-link">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-link btn-sm">Button</button>
				</div>
				<div class="col-sm-3">
					<button class="btn btn-link" disabled>Button</button>
				</div>
			</div>
		</div>
	</div>
	<hr />
	<div class="row pt-5 pb-5">
		<div class="col-sm-12">
			<h5>Forms</h5>
		</div>
		<div class="col-sm-12">
			<div class="form-group">
				<label>Label</label>
				<input placeholder="Placeholder..." class="form-control is-invalid" type="text" required />
				<small class="form-text text-muted">Help text.</small>
			</div>
			<div class="form-group">
				<label>Label</label>
				<input placeholder="Placeholder..." class="form-control form-control-sm is-valid" type="text" />
			</div>
			<div class="form-group">
				<label>Control A/Control B</label>
				<SplitInput LeftWidthPercentage="80">
					<LeftInput>
						<input placeholder="Placeholder..." class="form-control" type="text" />
					</LeftInput>
					<RightInput>
						<input placeholder="Placeholder..." class="form-control greyout" type="text" />
					</RightInput>
				</SplitInput>
			</div>
		</div>
		<div class="col-sm-12">
			<EditForm Model="Model" OnValidSubmit="Validate">
				<FluentValidationValidator @ref="ModelValidator" DisableAssemblyScanning="@true" />

				<div class="form-row">
					<div class="form-group col-sm-6">
						<label>Label</label>
						<DateInput @bind-Value="@Model.Date" DatepickerTitle="Title" class="form-control editable" />
						<p>Bound value: @Model.Date</p>
						<ValidationMessage For="() => Model.Date"></ValidationMessage>
					</div>
					<div class="form-group col-sm-6">
						<label>Label</label>
						<DateInput @bind-Value="@Model.Date2" placeholder="Text" disabled="true" class="form-control" />
						<p>Bound value: @Model.Date2</p>
						<ValidationMessage For="() => Model.Date2"></ValidationMessage>
					</div>
					<div class="form-group col-sm-6">
						<label>Label</label>
						<Datepicker @bind-Value="@Model.Date" DatepickerTitle="Title" class="form-control editable"/>
						<p>Bound value: @Model.Date</p>
						<ValidationMessage For="() => Model.Date"></ValidationMessage>
					</div>
					<div class="form-group col-sm-6">
						<label>Label</label>
						<Datepicker @bind-Value="@Model.Date2" placeholder="Text" class="form-control" />
						<p>Bound value: @Model.Date2</p>
						<ValidationMessage For="() => Model.Date2"></ValidationMessage>
					</div>
				</div>
				<div class="form-row">
		            <div class="form-group col-sm-3">
			            <label>Int</label>
			            <NumberInput @bind-Value="@Model.MyInt" class="form-control"/>
			            <p>Bound value: @Model.MyInt</p>
			            <ValidationMessage For="() => Model.MyInt"></ValidationMessage>
		            </div>
		            <div class="form-group col-sm-3">
			            <label>Nullable Int</label>
			            <NumberInput @bind-Value="@Model.MyNullableInt" class="form-control" />
			            <p>Bound value: @Model.MyNullableInt</p>
			            <ValidationMessage For="() => Model.MyNullableInt"></ValidationMessage>
		            </div>
		            <div class="form-group col-sm-3">
			            <label>Decimal</label>
			            <NumberInput @bind-Value="@Model.MyDecimal" class="form-control"/>
			            <p>Bound value: @Model.MyDecimal</p>
			            <ValidationMessage For="() => Model.MyDecimal"></ValidationMessage>
		            </div>
		            <div class="form-group col-sm-3">
			            <label>Nullable Decimal</label>
                        <NumberInput @bind-Value="@Model.MyNullableDecimal" class="form-control" placeholder="ayy lmao" />
			            <p>Bound value: @Model.MyNullableDecimal</p>
			            <ValidationMessage For="() => Model.MyNullableDecimal"></ValidationMessage>
		            </div>
	            </div>
				<button class="btn btn-blue" type="submit">Validate</button>
				
				@foreach (var date in DateModels)
				{
					<CheckboxAction style="all:unset" OnClick="() => ToggleAddToDateList(date)" CheckedPredicate="() => SelectedDateModels.Contains(date)" />
				}

			</EditForm>
			<div class="form-group form-row">
				<label>Label</label>
				<input placeholder="1000" class="form-control" type="number" min="10" max="1000" />
			</div>
			<div class="form-row">
				<div class="custom-checkbox custom-control ">
					<input class="custom-control-input" id="customControlValidation1" type="checkbox" checked />
					<label class="custom-control-label" for="customControlValidation1">Label</label>
				</div>
			</div>
			<div class="form-row">
				<MultiSelect TValue="DateTime" AllowSearch="true" Options="Options" ValueChanged="(e) => SelectedValues = e" DateTimeStringFormat="MMM yyyy"/>
				@foreach (var val in SelectedValues)
				{
					<p>@val</p>
				}
			</div>
			<div class="form-group form-row">
				<label for="exampleFormControlSelect1">Select</label>
				<select class="form-control" id="exampleFormControlSelect1">
					<option value="1">Option A</option>
					<option value="2">Option B</option>
					<option value="3">Option C</option>
				</select>
			</div>
			<div class="form-group form-row">
				<div class="custom-control custom-switch">
					<input type="checkbox" class="custom-control-input" id="3433" />
					<label class="custom-control-label" for="3433"> Edit</label>
				</div>
			</div>
		</div>
	</div>
	<hr />
	<div class="row">
		<div class="col-sm-12">
			<h5>Typography</h5>
		</div>
		<div class="col-sm-12">
			<p>This is regular text in a P tag</p>
			<b>This is bolded text in a B tag</b><br />
			<i>This is italicised text in an I tag</i><br />
			<strong>This is strong text in a strong tag</strong><br />
			<b><i>This is italicised bold text in a B and I tag</i></b><br />
			<h1>This is an H1</h1><br />
			<h2>This is an H2</h2><br />
			<h3>This is an H3</h3><br />
			<h4>This is an H4</h4><br />
			<h5>This is an H5</h5><br />
		</div>
	</div>
	<hr />
	<div class="row">
		<div class="col-sm-12">
			<h5>Alerts and Badges</h5>
		</div>
		<div class="col-sm-12">
			<div class="alert alert-green">
				<h4>Success!</h4>
				<p>This is a success alert <a href='#'>with a link</a></p>
			</div>
			<div class="alert alert-lightblue">
				<h4>Info!</h4>
				<p>This is an info alert <a href='#'>with a link</a></p>
			</div>
			<div class="alert alert-yellow">
				<h4>Warning!</h4>
				<p>This is a warning alert <a href='#'>with a link</a></p>
			</div>
			<div class="alert alert-red">
				<h4>Danger!</h4>
				<p>This is a danger alert <a href='#'>with a link</a></p>
			</div>
			<div class="badge badge-pill badge-blue">
				Primary badge
			</div>
			<div class="badge badge-pill badge-yellow">
				Secondary badge
			</div>
			<div class="badge badge-pill badge-green">
				Success badge
			</div>
			<div class="badge badge-pill badge-lightblue">
				Info badge
			</div>
			<div class="badge badge-pill badge-red">
				Danger badge
			</div>
		</div>
	</div>
	<hr />
	<div class="row pt-5">
		<div class="col-sm-12">
			<h5>Cards</h5>
		</div>
		<div class="col-sm-12">
			<div class="card-group">
				<div class="card">
					<div class="card-header">
						<b>Header</b>
					</div>
					<div class="card-body">
						<b>Title</b>
						<p class="card-text">Some supporting text</p>
						<a href='#' class="btn btn-blue">Go Somewhere</a>
					</div>
					<div class="card-footer">Footer of the card</div>
				</div>
				<Card>
					<CardHeader>Card title</CardHeader>
					<CardBody>
						<h5 class="card-title">Card title</h5>
						<p class="card-text">This is a <Highlighter Type="NotificationType.Blue">wider card</Highlighter> with supporting text below as a natural lead-in to <Highlighter Type="NotificationType.Red">additional content</Highlighter>. This content is a little bit longer.</p>
						<p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
					</CardBody>
				</Card>

				<Card ClassOverride="p-5">
					<CardHeader ClassOverride="text-uppercase">Card title</CardHeader>
					<CardBody ClassOverride="bg-yellow">
						<h5 class="card-title">Card title</h5>
						<p class="card-text">This is a card with ClassOverrides p-5 on Card, text-uppercase on CardHeader and bg-yellow on CardBody.</p>
						<p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
					</CardBody>
				</Card>
			</div>
		</div>
	</div>
</div>

@code {
	public FluentValidationValidator ModelValidator;

	public TestModel Model { get; set; } = new();
	public List<DateTime> Options { get; set; } = new() {DateTime.Now, DateTime.Today.AddDays(-3), DateTime.Today.AddDays(-3).AddMonths(-5)};
	public List<DateTime> SelectedValues = new();

	public void Validate()
	{
		var isValid = ModelValidator.Validate(x => x.IncludeAllRuleSets());
		if (isValid == false) return;
	}

	protected void ToggleAddToDateList(TestModel model)
	{
		if (SelectedDateModels.Contains(model)) SelectedDateModels.Remove(model);
		else SelectedDateModels.Add(model);
	}


	public List<TestModel> SelectedDateModels = new();
	public List<TestModel> DateModels = new() { new(), new() {Date2 = DateTime.Now}, new() { Date = DateTime.Now } };
}