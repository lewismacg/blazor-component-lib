@inherits LayoutComponentBase
@inject ToasterManager ToasterManager

<theme data-theme="@Theme" class="v-zoom @Class">
	<DefaultLayout FixNav="true">
		<SearchBar>
			<div class="input-group">
				<input type="text" class="form-control" placeholder="Search..." />
				<div class="input-group-append my-auto">
					<!-- Obvs make this perform whatever search logic you need. -->
					<span class="g-search-icon">
						<i class="material-icons text-blue large-icon" @onclick="@(() => Console.WriteLine(""))">search</i>
					</span>
				</div>
			</div>
		</SearchBar>
		<NotificationMenu>
			<div class="dropdown-wrapper" @onmouseover="() => NotificationsActive = true" @onmouseleave="OnNotificationsMouseLeave">
				<Icon IsLarge="true">notifications</Icon>
				@if (NotificationsActive)
				{
					<div class="dropdown-content">
						<NotificationsWidget OnViewAllCallback="@(() => Console.WriteLine("View all!"))">
							@foreach (var notification in Notifications)
							{
								<NotificationSegment Title="@notification.Title" Text="@notification.Body" Footer="@GetFormattedTimespanSince(notification.Time)" FillClass="@GetFillColourForNotificationType(notification.Level)" IsUnread="true" />
							}
						</NotificationsWidget>
					</div>
				}
			</div>
		</NotificationMenu>
		<DropdownMenu>
			<div class="dropdown-wrapper">
				<Icon IsLarge="true">menu</Icon>
				<div class="dropdown-content">
					<div class="ddc-item">
						You are logged in as: {User}
					</div>
					<a class="ddc-item" @onclick="@((e) => SetTheme("light"))">
						<Icon>wb_sunny</Icon> Light Mode
					</a>
					<a class="ddc-item" @onclick="@((e) => SetTheme("dark"))">
						<Icon>nights_stay</Icon> Dark Mode
					</a>
					<a class="ddc-item" @onclick="@((e) => Class = "out")">
						<Icon>zoom_out</Icon> Zoom out
					</a>
					<a class="ddc-item">
						<Icon OnClickAction="(e) => Console.WriteLine('H')">logout</Icon> Logout
					</a>
				</div>
			</div>
		</DropdownMenu>
		<NavMenu>
			<NavMenu />
		</NavMenu>
		<Content>
			<CascadingValue Value="@ToasterManager">
				<Toaster />
				@Body
				<BannerWrapper>
					<SectionOutlet Name="banners" />
				</BannerWrapper>
			</CascadingValue>
		</Content>
	</DefaultLayout>
</theme>

@code
{
	public string Theme { get; set; }
	public string Class { get; set; }
	public bool NotificationsActive { get; set; }

	protected List<ToastModel> Notifications { get; set; } = new() { new() { Title = "Notification 1", Body = "Here is my first notification", Level = (NotificationType)new Random().Next(0, 4), Time = DateTime.Now.AddDays(-4) }, new() { Title = "Notification 2", Body = "Here is my OTHER notification. Oh my it is a bit long!", Level = (NotificationType)new Random().Next(0, 4), Time = DateTime.Now.AddHours(-7) } };

	protected void OnNotificationsMouseLeave()
	{
		NotificationsActive = false;

		Notifications = new()
		{
			new() { Title = "Notification 1", Body = "Here is my first notification", Level = (NotificationType)new Random().Next(0, 4), Time = DateTime.Now.AddDays(-4) },
			new() { Title = "Notification 2", Body = "Here is my OTHER notification. Oh my it is a bit long!", Level = (NotificationType)new Random().Next(0, 4), Time = DateTime.Now.AddHours(-7) }
		};
	}

	public void SetTheme(string theme)
	{
		Theme = theme;
		StateHasChanged();
	}

	private string GetFormattedTimespanSince(DateTime dateTime)
	{
		var timeSpanSince = DateTime.Now.Subtract(dateTime);

		if (timeSpanSince.Days > 0) return $"{timeSpanSince.Days} days ago.";
		if (timeSpanSince.Hours > 0) return $"{timeSpanSince.Hours} hours ago.";

		return $"{timeSpanSince.Minutes} minutes ago.";
	}

	private string GetFillColourForNotificationType(NotificationType notificationType)
	{
		return notificationType switch
		{
			NotificationType.Blue => "blue-fill",
			NotificationType.Green => "green-fill",
			NotificationType.Yellow => "yellow-fill",
			NotificationType.Red => "red-fill",
			_ => ""
		};
	}
}