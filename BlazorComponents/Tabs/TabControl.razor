@namespace BlazorComponents

<CascadingValue Value="this">
	<ul class="nav nav-tabs">
		@foreach (TabPageBase tabPage in _pages.OrderBy(x => x.Ordinal))
		{
			<li class="nav-item">
				<a class="nav-link @GetButtonClass(tabPage)" @onclick=@(() => ActivatePage(tabPage))>
					<div class="row">
						<div class="pr-1 pt-1">
							@tabPage.TabTitle
						</div>
						<div class="pt-0" style="height:30px"> </div>
					</div>
				</a>
			</li>
		}
	</ul>
	@ChildContent
</CascadingValue>

@code {

	#region Parameters

	[Parameter] public RenderFragment ChildContent { get; set; }
	[Parameter] public bool DisableNavigation { get; set; }
	[Parameter] public EventCallback<TabPageBase> OnNavigationCallback { get; set; }

	#endregion

	#region Properties and Fields

	public TabPageBase ActivePage { get; set; }
	List<TabPageBase> _pages = new();

	#endregion

	#region Methods

	internal void AddPage(TabPageBase tabPage)
	{
		_pages.Add(tabPage);

		if (_pages.Count == 1) tabPage.ActivatePage();
		StateHasChanged();
	}

	internal void RemovePage(TabPageBase tabPage)
	{
		if (ActivePage == tabPage) RemoveActiveTab();
		else
		{
			_pages.Remove(tabPage);
			StateHasChanged();
		}
	}

	public void RemoveActiveTab()
	{
		var pageIndex = _pages.IndexOf(ActivePage);

		_pages.Remove(ActivePage);

		if (_pages.Any())
		{
			if (pageIndex < _pages.Count) _pages[pageIndex].ActivatePage();
			else if (pageIndex - 1 < _pages.Count) _pages[pageIndex - 1].ActivatePage();
			else _pages.First().ActivatePage();
		}

		StateHasChanged();
	}

	string GetButtonClass(TabPageBase page) => page == ActivePage ? "active" : "";

	void ActivatePage(TabPageBase page)
	{
		if (OnNavigationCallback.HasDelegate) OnNavigationCallback.InvokeAsync(page);
		if (DisableNavigation) return;

		page.ActivatePage();
	}

	#endregion
}