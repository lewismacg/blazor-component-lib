@page "/DragAndDrop"
@using ComponentDemo.Models

<DragContainer TModel="JobModel" Models="Jobs" OnCategoryUpdated="async (e) => await HandleStatusUpdated(e)" OnDrop="(x, y) => SetCategory(x,y)" TextFunction="@(x => x.Name)" CategoryFunction="@(x => x.Category)">
	<DragColumn IsLoading="IsLoading" TModel="JobModel" CategoryValue="@null" ColumnType="NotificationType.Red" BodyContentHeight="40" AdditionalDragItemClass="d-inline-block mr-3">
		<HeaderContent>
			<Icon OnClickAction="(e) => CollapseColumn()">expand_less</Icon>
			<Icon>delete</Icon>
		</HeaderContent>
		<BodyContent>
			<span class="align-self-end">Todo Jobs</span>
		</BodyContent>
	</DragColumn>
	<DragColumn TModel="JobModel" CategoryValue="@("Started")" ColumnTitle="Start" ShowCount="true" ColumnType="NotificationType.Green">
		<BodyContent>
			Could put anything here, even another component.
		</BodyContent>
	</DragColumn>
	<DragColumn TModel="JobModel" CategoryValue="@("Completed")" ColumnType="NotificationType.Green">
		<BodyContent>
			<p>Proactively envisioned multimedia based expertise and cross-media growth strategies. Seamlessly visualize quality intellectual capital without superior collaboration and idea-sharing. Holistically pontificate installed base portals after maintainable products.</p>
		</BodyContent>
	</DragColumn>
</DragContainer>


<div class="border rounded">
	<div class="p-3">
		<ul>
			@foreach (var log in Logs)
			{
				<li>@log</li>
			}
		</ul>
	</div>
</div>

@code {
	private static Random random = new Random();
	public bool IsLoading { get; set; }
	List<JobModel> Jobs = new();
	List<string> AllStatuses = new() { "Started", "Completed", null };
	List<string> Logs = new();
	protected bool ShowColumn { get; set; } = true;

	protected override void OnInitialized()
	{
		Jobs.Add(GenerateJobModel("Mow the lawn", AllStatuses[random.Next(AllStatuses.Count)]));
		Jobs.Add(GenerateJobModel("Do the dishes", AllStatuses[random.Next(AllStatuses.Count)]));
		Jobs.Add(GenerateJobModel("Cook dinner", AllStatuses[random.Next(AllStatuses.Count)]));
		Jobs.Add(GenerateJobModel("Repress childhood memories", AllStatuses[random.Next(AllStatuses.Count)]));
		Jobs.Add(GenerateJobModel("Walk the dog", AllStatuses[random.Next(AllStatuses.Count)]));
	}

	bool SetCategory(JobModel jobModel, object newValue)
	{
		jobModel.Category = newValue?.ToString();

		return true;
	}

	async Task HandleStatusUpdated(JobModel updatedJob)
	{
		Logs.Add(updatedJob.Name + updatedJob.Category);
		IsLoading = true;

		await Task.Delay(3000);

		IsLoading = false;
	}

	JobModel GenerateJobModel(string title, string category)
	{
		return new JobModel { Name = title, Category = category};
	}

	void CollapseColumn()
	{
		ShowColumn = !ShowColumn;
		StateHasChanged();
	}
}