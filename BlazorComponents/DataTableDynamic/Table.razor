@namespace BlazorComponents
@typeparam TableItem

@if (ShowChildContentAtTop)
{
	<CascadingValue Value="(ITable<TableItem>)this" Name="Table">
		@ChildContent
	</CascadingValue>
}

@if (Columns.Any())
{
	var columnCount = Columns.Count + (_detailTemplate != null ? 1 : 0);

	<div class="data-table-wrapper @ClassWrapperOverride">

		@if (ShowSearchBar)
		{
			<div class="d-flex flex-row mb-3">
				<div class="flex-grow-0">
					<div class="d-flex float-left pr-3 pt-3">
						@if (Columns.Exists(column => !column.Visible))
						{
							<a class="btn btn-yellow" href="javascript:;" @ref="ColumnMenuVisibilityRef" @onclick="@(_ => VisibilityMenuOpen = !VisibilityMenuOpen)">
								Column Visibility
							</a>
							@if (VisibilityMenuOpen)
							{
								<Popover Origin="ColumnMenuVisibilityRef">
									<b class="popover-header">Column Visibility</b>
									<div class="popover-body">
										<table class="table table-borderless">
											@foreach (IColumn<TableItem> column in Columns.Where(column => !column.Visible))
											{
												<tr>
													<td>
														@(column.Title)
													</td>
													<td>
														<div class="float-right" @onclick="@(_ => MakeColumnVisible(column))">
															<a href="javascript:;">
																<span aria-hidden="true">
																	<Icon IconColour="Colour.Black" IconName="add" />
																</span>
															</a>
														</div>
													</td>
												</tr>

											}
										</table>
										<button class="btn btn-sm btn-yellow" @onclick="@(() => VisibilityMenuOpen = false)">
											Close
										</button>
									</div>
								</Popover>
							}
						}
						@if (AllowExport && ExportAtTop)
						{
							<span class="px-1">
								<button class="btn btn-blue" @onclick="DownloadCsv">Export</button>
							</span>
						}
					</div>
					@if (HeaderChildContent != null)
					{
						@HeaderChildContent
					}
				</div>

				<div class="flex-grow-1">
					<div class="data-table-filter">
						<div class="float-right">
							<div class="form-group row">
								<label class="col-form-label col-sm-4">Filter</label>
								<input class="form-control col-sm-8" type="text" placeholder="@SearchPlaceholder" @onchange=@(x => { GlobalSearch = x.Value.ToString(); UpdateAsync(); }) />
							</div>
						</div>
					</div>
				</div>

			</div>
		}
		@if (AllowTopHorizontalScroll)
		{
			<div class="horizontal-scroller @(ShowSearchBar ? "mt-n4" : string.Empty) mb-3">
				<button id="@($"leftScrollButton-{ScrollableId}")" class="no-default-styles c-pointer"><Icon IconColour="Colour.Green">chevron_left</Icon></button>
				<span class="text-muted strong mx-1">Scroll</span>
				<button id="@($"rightScrollButton-{ScrollableId}")" class="no-default-styles c-pointer"><Icon IconColour="Colour.Green">chevron_right</Icon></button>
				<div class="flex-line"></div>
			</div>
		}
		<div class="@(AllowXScroll ? "table-scroll" : "")" id="@ScrollableId">
			<table aria-readonly="@(IsEditMode ? "false" : "true")" role="grid" class="@TableClass" @attributes="UnknownParameters">
				<thead class="@TableHeadClass" style="cursor: pointer;">
					@if (_detailTemplate != null && DetailViewAvailable)
					{
					<th style="width: 1%"></th>
					}
					@foreach (IColumn<TableItem> column in Columns)
					{
						@if (column.Visible)
						{
						<th scope="col" style="@(!string.IsNullOrEmpty(column.Width) ? $"width:{column.Width};" : "") user-select: none"
				@ondrop="@(_ => HandleDrop(column))"
				@ondragstart="@(_ => HandleDragStart(column))"
				ondragover="event.preventDefault();"
				draggable="@(ColumnReorder.ToString())"
				@key="column"
				aria-sort="@column.AriaSort"
				class="@(column.Class)">

							<div @onclick="@(async () => await column.SortByAsync())" class="column-header">
								<span>@column.Title</span>

									@if (column.SortColumn)
									{
										if (column.SortDescending)
										{
										<span aria-hidden="true"><Icon IconColour="Colour.Black" IconName="arrow_upward" /></span>
										}
										else
										{
										<span aria-hidden="true"><Icon IconColour="Colour.Black" IconName="arrow_downward" /></span>
										}
									}

									@if (column.Filterable)
									{
									<div class="float-right" @onclick="@(_ => column.ToggleFilter())" @onclick:stopPropagation>
										<a href="javascript:;" @ref="column.FilterRef" aria-expanded="@(column.FilterOpen ? "true" : "false")" style="text-decoration: none" aria-label="@(column.Filter == null ? "unfiltered" : "filtered")">
											<span aria-hidden="true" style="@(column.Filter == null ? "opacity: 0.2;" : string.Empty)">
												<Icon IconColour="Colour.Black" IconName="filter_list" />
											</span>
										</a>
									</div>
									<CascadingValue Value="column" Name="Column">
											@if (column.FilterOpen)
											{
											<Popover Origin="column.FilterRef">
												<b class="popover-header">Filter</b>
												<div class="popover-body">
													<FilterManager TableItem="TableItem">
														<StringFilter TableItem="TableItem" />
														<BooleanFilter TableItem="TableItem" />
														<NumberFilter TableItem="TableItem" />
														<DateFilter TableItem="TableItem" />
														<EnumFilter TableItem="TableItem" />
															@if (column.CustomIFilters != null)
															{
																@column.CustomIFilters(column)
															}
													</FilterManager>
												</div>
											</Popover>
											}
									</CascadingValue>
									}

									@if (column.Hideable)
									{
									<div class="float-right mr-1" @onclick="@(_ => column.Visible = false)" @onclick:stopPropagation>
										<span aria-hidden="true">
											<Icon IconColour="Colour.Black" IconName="remove" />
										</span>
									</div>
									}
							</div>
						</th>
						}
					}
				</thead>
				<tbody class="@TableBodyClass">
					@if (FilteredItems != null)
					{
						if (FilteredItems.Any())
						{
							int i = 0;
							bool detailViewActive = _detailTemplate != null;

							foreach (TableItem item in FilteredItems)
							{
								bool rowDisplayed = false;

								foreach (CustomRow<TableItem> customRow in CustomRows)
								{
									if (customRow.IsActiveForItem != null && customRow.IsActiveForItem(item))
									{
										@customRow.ChildContent(item)
										rowDisplayed = true;
										break;
									}
								}

								if (!rowDisplayed)
								{
									<tr @key="item" aria-selected="@(SelectedItems.Contains(item) ? "true" : null)" class="@RowClass(item) @(SelectedItems.Contains(item) ? "table-active" : "") data-table-row slim-row" @onclick="(() => OnRowClickHandler(item))">

										@{
											int locali = i;
											if (!detailsViewOpen.ContainsKey(locali))
											{
												detailsViewOpen[locali] = _detailTemplate?.ExpandedByDefault ?? false;
											}
										}
										@if (detailViewActive && DetailViewAvailable)
										{
											<td>
												@if (_detailTemplate.ShowDetailView.Compile().Invoke(item))
												{
													<a href="javascript:;" style="text-decoration: none" @onclick="@(() => { detailsViewOpen[locali] = !detailsViewOpen[locali]; StateHasChanged(); })" title="@(detailsViewOpen[i] ? "Close" : "Open")" aria-expanded="@(detailsViewOpen[locali] ? "true" : "false")">
														@if (detailsViewOpen[locali])
														{
															<span aria-hidden="true"><Icon IconColour="Colour.Black" IconName="expand_less" /></span>
														}
														else
														{
															<span aria-hidden="true"><Icon IconColour="Colour.Black" IconName="expand_more" /></span>
														}
													</a>
												}
											</td>
										}

										@foreach (IColumn<TableItem> column in Columns)
										{
											@if (column.Visible)
											{
												<td @key="column"
						style="@(column.Align > 0 ? $"text-align: {column.Align};" : "")"
						class="@(column.Class)">

													@if (IsEditMode && column.EditTemplate != null)
													{
														@column.EditTemplate(item)
													}
													else if (column.Template == null)
													{
														@column.Render(item)
													}
													else
													{
														@column.Template(item)
													}
												</td>
											}
										}
									</tr>

									if (detailViewActive && detailsViewOpen[i])
									{
										@_detailTemplate.ChildContent(item)
									}
								}

								{
									i++;
								}
							}
						}
						else if (_emptyDataTemplate != null)
						{
							<tr>
								<td colspan="@columnCount">
									@_emptyDataTemplate
								</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="@columnCount">
								<LoadingWrapper Condition="() => _loadingDataTemplate != null">
									@_loadingDataTemplate
								</LoadingWrapper>
							</td>
						</tr>
					}
				</tbody>

				@if (ShowFooter)
				{
					<tfoot class="@TableFooterClass">
						<tr>
							@if (_detailTemplate != null)
							{
								<td style="width: 1%"></td>
							}
							@foreach (IColumn<TableItem> column in Columns)
							{
								<td @key="column" style="@(column.Align > 0 ? $"text-align: {column.Align};" : "")" class="@(column.ColumnFooterClass)">
									@if (!string.IsNullOrEmpty(column.SetFooterValue))
									{
										@column.SetFooterValue
									}
									else if (FilteredItems != null && FilteredItems.Any())
									{
										@column.GetFooterValue()
									}
								</td>
							}
						</tr>
					</tfoot>
				}
			</table>
		</div>
	</div>
}

@if (AllowExport && !ExportAtTop)
{
	<div class="mt-2 mb-2 float-left">
		<button class="btn btn-blue" type="button" @onclick="@DownloadCsv">
			Export
		</button>
	</div>
}

@if (!ShowChildContentAtTop)
{
	<CascadingValue Value="(ITable<TableItem>)this" Name="Table">
		@ChildContent
	</CascadingValue>
}